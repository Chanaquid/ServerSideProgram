@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using H4SoftwareTestOgSikkerhed.Data
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text.Encodings.Web
@using QRCoder

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder

<PageTitle>Confirm email</PageTitle>

<div class="confirm-email-container">
    <div class="confirm-email-box">
        <h1 class="text-center">Confirm Email</h1>
        <StatusMessage Message="@statusMessage" />
        @if (imgSrc != null && imgSrc.Trim() != "")
        {
            <div class="text-center">
                <h2>Download Google Authenticator and scan this QR Code to register for 2F Authentication</h2>
                <img src="@imgSrc" alt="QR Code" style="width: 300px; height: 300px;" />
            </div>
        }
        @if (!string.IsNullOrEmpty(statusMessage) && statusMessage.Contains("confirming your email"))
        {
            <div class="text-center mt-4">
                <a href="/Account/Login" class="btn btn-primary">Go to Login</a>
            </div>
        }
    </div>
</div>

<style>
    .confirm-email-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f8f9fa; /* Light background color */
    }

    .confirm-email-box {
        width: 100%;
        max-width: 600px;
        padding: 2rem;
        border-radius: 8px;
        background-color: #ffffff; /* White box background */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    }

    .text-center {
        text-align: center;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        text-decoration: none;
        padding: 10px 20px;
        color: white;
        border-radius: 4px;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
            text-decoration: none;
        }

    .mt-4 {
        margin-top: 1.5rem;
    }
</style>

@code {
    private string? statusMessage;
    private string? imgSrc;
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
            await LoadSharedKeyAndQrCodeUriAsync(user);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        string sharedKey = FormatKey(unformattedKey!);
        var email = await UserManager.GetEmailAsync(user);
        string authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
        CreateQrImage(authenticatorUri);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private void CreateQrImage(string authenticatorUri)
    {
        using (QRCodeGenerator qrGenerator = new QRCodeGenerator())
        using (QRCodeData qrCodeData = qrGenerator.CreateQrCode(authenticatorUri, QRCodeGenerator.ECCLevel.Q))
        using (PngByteQRCode qrCode = new PngByteQRCode(qrCodeData))
        {
            byte[] qrCodeImage = qrCode.GetGraphic(20);
            string src = ByteToString(qrCodeImage);
            imgSrc = $"data:image/png;base64,{src}";
        }
    }

    private string ByteToString(byte[] byteArr)
    {
        string str = Convert.ToBase64String(byteArr);
        return str;
    }
}
