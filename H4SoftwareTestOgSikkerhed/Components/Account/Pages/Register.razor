@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using H4SoftwareTestOgSikkerhed.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ICustomEmailSender EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Register</PageTitle>

<div class="register-container">
    <div class="register-box">
        <h1 class="text-center">Register</h1>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Role" class="form-select" aria-required="true">
                    <option value="">Select Role</option>
                    <option value="User">User</option>
                    <option value="Admin">Admin</option>
                </InputSelect>
                <label for="role">Role</label>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

<style>
    body {
        margin: 0;
        background-color: #f8f9fa; /* Light neutral background */
    }

    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Ensures full height for centering */
        background-color: #f8f9fa; /* Optional: Adjust background color */
        margin: 0;
    }

    .register-box {
        width: 100%;
        max-width: 400px;
        padding: 2rem;
        border-radius: 8px;
        background-color: #ffffff; /* Optional: Adjust card color */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .text-center {
        text-align: center;
    }
</style>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private async Task RegisterUser(EditContext editContext)
    {
        // Create a new user instance
        var user = CreateUser();

        // Set the username and email for the new user
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        // Create the user with the provided password
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // Add user to selected role if role is selected
        if (!string.IsNullOrEmpty(Input.Role))
        {
            // Check if role exists, create it if it doesn't
            if (!await RoleManager.RoleExistsAsync(Input.Role))
            {
                await RoleManager.CreateAsync(new IdentityRole(Input.Role));
            }

            // Add user to role
            await UserManager.AddToRoleAsync(user, Input.Role);
        }

        // Automatically confirm the email
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        await UserManager.ConfirmEmailAsync(user, code);

        // Log the user creation
        Logger.LogInformation("User created a new account with password and auto-confirmed email. Role: {0}", Input.Role);

        // Sign in the user and redirect
        await SignInManager.SignInAsync(user, isPersistent: false);
        // Instead of just redirecting to login
        RedirectManager.RedirectTo($"Account/Login?message=Your+email+has+been+confirmed+successfully");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Please select a role")]
        [Display(Name = "Role")]
        public string Role { get; set; } = "";
    }
}