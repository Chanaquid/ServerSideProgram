@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using H4SoftwareTestOgSikkerhed.Data

@inject UserManager<ApplicationUser> UserManager
@inject ICustomEmailSender EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<div class="confirmation-container">
    <div class="confirmation-box">
        <h1 class="text-center">Register Confirmation</h1>

        <StatusMessage Message="@statusMessage" />

        @if (emailConfirmationLink is null)
        {
            <p class="text-center">
                Please check your email to confirm your account.
            </p>
        }
    </div>
</div>

<style>
    body {
        margin: 0;
        background-color: #f8f9fa; /* Light neutral background */
    }

    .confirmation-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Ensures full height for centering */
        background-color: #f8f9fa; /* Optional: Adjust background color */
        margin: 0;
    }

    .confirmation-box {
        width: 100%;
        max-width: 400px;
        padding: 2rem;
        border-radius: 8px;
        background-color: #ffffff; /* White card background */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow for card effect */
        text-align: center;
    }

    .text-center {
        text-align: center;
    }

    p {
        font-size: 1rem;
        color: #6c757d; /* Subtle text color */
        margin-top: 1rem;
    }
</style>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else
        {
            // Use your custom email sender to send the confirmation email.
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

            // Using the custom email sender to send the confirmation email.
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            await EmailSender.SendEmailConfirmationAsync(user, callbackUrl); // Use your custom method
        }
    }
}
