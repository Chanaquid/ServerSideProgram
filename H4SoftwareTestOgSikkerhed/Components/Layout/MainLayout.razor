@using Microsoft.AspNetCore.Identity
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject UserManager<H4SoftwareTestOgSikkerhed.Data.ApplicationUser> UserManager
@inject AuthenticationStateProvider _authenticationStateProvider;

<div class="page" style="@(isAuthenticated ? "" : "width: 100%; height: 100vh; display: flex; justify-content: center; align-items: center; background-color: #f8f9fa;")">
    @if (isAuthenticated)
    {
        <!-- Full layout when logged in -->
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
                <span class="user-email">
                    <a href="/Account/Manage">
                        @if (isAdmin)
                        {
                            @($"{userEmail}(Admin)")
                        }
                        else
                        {
                            @userEmail
                        }
                    </a>
                </span>

                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="btn btn-link logout-button">Logout</button>
                </form>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    }
    else
    {
        <!-- Show the login content in the center -->
        <main>
            @Body
        </main>
    }
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool isAdmin;
    private bool isAuthenticated;
    private string? userEmail;
    private string? currentUrl;
    private string roleDebug = "";

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check for Admin role in claims
        isAdmin = user.IsInRole("Admin");
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            userEmail = user.Identity?.Name ?? "User"; // Default to "User" if Name is null

            // Direct database check for role if user is authenticated
            if (userEmail != null)
            {
                var appUser = await UserManager.FindByEmailAsync(userEmail);
                if (appUser != null)
                {
                    // This performs a direct database check for the role
                    isAdmin = await UserManager.IsInRoleAsync(appUser, "Admin");
                }
            }

            // Log all roles for debugging
            foreach (var claim in user.Claims.Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"))
            {
                roleDebug += $"Role: {claim.Value}; ";
                Console.WriteLine($"User has role: {claim.Value}");
            }
        }
    }
}